<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.linitly.boot.base.dao.SysAdminUserMapper">
    <resultMap extends="org.linitly.boot.base.dao.BaseBeanMapper.BaseEntityMap" id="BaseResultMap" type="org.linitly.boot.base.entity.SysAdminUser">
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="mobile_number" jdbcType="VARCHAR" property="mobileNumber" />
        <result column="salt" jdbcType="VARCHAR" property="salt" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="job_number" jdbcType="VARCHAR" property="jobNumber" />
        <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
        <result column="real_name" jdbcType="VARCHAR" property="realName" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="sex" jdbcType="INTEGER" property="sex" />
        <result column="head_img_url" jdbcType="VARCHAR" property="headImgUrl" />
    </resultMap>

    <resultMap id="postDeptIdMap" type="sysPostDeptIdVO">
        <result column="post_id" jdbcType="BIGINT" property="postId" />
        <result column="dept_id" jdbcType="BIGINT" property="deptId" />
    </resultMap>

    <sql id="Base_Column_List">
        id, username, mobile_number, salt, password, job_number, nick_name, real_name, email, 
        sex, head_img_url, enabled, created_user_id, created_time, last_modified_user_id,
        last_modified_time
    </sql>

    <select id="findByMobileNumber" parameterType="string" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM sys_admin_user
        WHERE mobile_number = #{mobileNumber}
    </select>

    <select id="findByUsername" parameterType="string" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM sys_admin_user
        WHERE username = #{username}
    </select>

    <select id="countByMobileOrUsernameOrJobNumber" resultType="int">
        SELECT COUNT(id)
        FROM sys_admin_user
        <where>
            <if test="mobileNumber != null and mobileNumber != ''">
                mobile_number = #{mobileNumber}
            </if>
            <if test="username != null and username != ''">
                username = #{username}
            </if>
            <if test="jobNumber != null and jobNumber != ''">
                job_number = #{jobNumber}
            </if>
            <if test="id != null">
                AND id != #{id}
            </if>
        </where>
    </select>

    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM sys_admin_user
        WHERE id = #{id, jdbcType=BIGINT}
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM sys_admin_user
        WHERE id = #{id, jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="org.linitly.boot.base.entity.SysAdminUser">
        INSERT INTO sys_admin_user (id, username, mobile_number, 
            salt, password, job_number, 
            nick_name, real_name, email, 
            sex, head_img_url,
            created_user_id, last_modified_user_id)
        VALUES (#{id, jdbcType=BIGINT}, #{username, jdbcType=VARCHAR}, #{mobileNumber, jdbcType=VARCHAR}, 
            #{salt, jdbcType=VARCHAR}, #{password, jdbcType=VARCHAR}, #{jobNumber, jdbcType=VARCHAR}, 
            #{nickName, jdbcType=VARCHAR}, #{realName, jdbcType=VARCHAR}, #{email, jdbcType=VARCHAR}, 
            #{sex, jdbcType=INTEGER}, #{headImgUrl, jdbcType=VARCHAR},
            #{createdUserId, jdbcType=BIGINT}, #{lastModifiedUserId, jdbcType=BIGINT})
    </insert>

    <update id="updateById" parameterType="org.linitly.boot.base.entity.SysAdminUser" useGeneratedKeys="true" keyProperty="id">
        UPDATE sys_admin_user
        SET username = #{username, jdbcType=VARCHAR},
            mobile_number = #{mobileNumber, jdbcType=VARCHAR},
            salt = #{salt, jdbcType=VARCHAR},
            password = #{password, jdbcType=VARCHAR},
            job_number = #{jobNumber, jdbcType=VARCHAR},
            nick_name = #{nickName, jdbcType=VARCHAR},
            real_name = #{realName, jdbcType=VARCHAR},
            email = #{email, jdbcType=VARCHAR},
            sex = #{sex, jdbcType=INTEGER},
            head_img_url = #{headImgUrl, jdbcType=VARCHAR},
            last_modified_user_id = #{lastModifiedUserId, jdbcType=BIGINT}
        WHERE id = #{id, jdbcType=BIGINT}
    </update>

    <select id="findAll" parameterType="sysAdminUserSearchDTO" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM sys_admin_user
        <where>
            <if test="username != null and username != ''">
                username LIKE CONCAT('%' #{username, jdbcType=VARCHAR}, '%')
            </if>
            <if test="mobileNumber != null and mobileNumber != ''">
                AND mobile_number LIKE CONCAT('%', #{mobileNumber, jdbcType=VARCHAR}, '%')
            </if>
            <if test="jobNumber != null and jobNumber != ''">
                AND job_number LIKE CONCAT('%', #{jobNumber, jdbcType=VARCHAR}, '%')
            </if>
            <if test="nickName != null and nickName != ''">
                AND nick_name LIKE CONCAT('%', #{nickName, jdbcType=VARCHAR}, '%')
            </if>
            <if test="realName != null and realName != ''">
                AND real_name LIKE CONCAT('%', #{realName, jdbcType=VARCHAR}, '%')
            </if>
            <if test="sex != null">
                AND sex = #{sex, jdbcType=INTEGER}
            </if>
            <if test="enabled != null">
                AND enabled = #{enabled, jdbcType=INTEGER}
            </if>
            <if test="startTime != null">
                AND created_time &gt;= #{startTime, jdbcType=TIMESTAMP}
            </if>
            <if test="endTime != null">
                AND created_time &lt; #{endTime, jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>

    <insert id="insertSelective" parameterType="org.linitly.boot.base.entity.SysAdminUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_admin_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="mobileNumber != null">
                mobile_number,
            </if>
            <if test="salt != null">
                salt,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="jobNumber != null">
                job_number,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="realName != null">
                real_name,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="headImgUrl != null">
                head_img_url,
            </if>
            <if test="enabled != null">
                enabled,
            </if>
            <if test="createdUserId != null">
                created_user_id,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="lastModifiedUserId != null">
                last_modified_user_id,
            </if>
            <if test="lastModifiedTime != null">
                last_modified_time,
            </if>
        </trim>

        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=BIGINT},
            </if>
            <if test="username != null">
                #{username, jdbcType=VARCHAR},
            </if>
            <if test="mobileNumber != null">
                #{mobileNumber, jdbcType=VARCHAR},
            </if>
            <if test="salt != null">
                #{salt, jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password, jdbcType=VARCHAR},
            </if>
            <if test="jobNumber != null">
                #{jobNumber, jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                #{nickName, jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
                #{realName, jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex, jdbcType=INTEGER},
            </if>
            <if test="headImgUrl != null">
                #{headImgUrl, jdbcType=VARCHAR},
            </if>
            <if test="enabled != null">
                #{enabled, jdbcType=INTEGER},
            </if>
            <if test="createdUserId != null">
                #{createdUserId, jdbcType=BIGINT},
            </if>
            <if test="createdTime != null">
                #{createdTime, jdbcType=TIMESTAMP},
            </if>
            <if test="lastModifiedUserId != null">
                #{lastModifiedUserId, jdbcType=BIGINT},
            </if>
            <if test="lastModifiedTime != null">
                #{lastModifiedTime, jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByIdSelective" parameterType="org.linitly.boot.base.entity.SysAdminUser">
        UPDATE sys_admin_user
        <set>
            <if test="username != null">
                username = #{username, jdbcType=VARCHAR},
            </if>
            <if test="mobileNumber != null">
                mobile_number = #{mobileNumber, jdbcType=VARCHAR},
            </if>
            <if test="salt != null">
                salt = #{salt, jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password, jdbcType=VARCHAR},
            </if>
            <if test="jobNumber != null">
                job_number = #{jobNumber, jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName, jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
                real_name = #{realName, jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex, jdbcType=INTEGER},
            </if>
            <if test="headImgUrl != null">
                head_img_url = #{headImgUrl, jdbcType=VARCHAR},
            </if>
            <if test="enabled != null">
                enabled = #{enabled, jdbcType=INTEGER},
            </if>
            <if test="createdUserId != null">
                created_user_id = #{createdUserId, jdbcType=BIGINT},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime, jdbcType=TIMESTAMP},
            </if>
            <if test="lastModifiedUserId != null">
                last_modified_user_id = #{lastModifiedUserId, jdbcType=BIGINT},
            </if>
            <if test="lastModifiedTime != null">
                last_modified_time = #{lastModifiedTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id, jdbcType=BIGINT}
    </update>

    <delete id="deleteRolesByAdminUserId" parameterType="long">
        DELETE FROM sys_admin_user_role
        WHERE admin_user_id = #{id}
    </delete>

    <delete id="deletePostsByAdminUserId" parameterType="long">
        DELETE FROM sys_admin_user_post
        WHERE admin_user_id = #{id}
    </delete>

    <insert id="insertAdminUserRole">
        INSERT INTO sys_admin_user_role(admin_user_id, role_id)
        VALUES
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{id}, #{roleId})
        </foreach>
    </insert>

    <insert id="insertAdminUserPost">
        INSERT INTO sys_admin_user_post(admin_user_id, post_id)
        VALUES
        <foreach collection="postIds" item="postId" separator=",">
            (#{id}, #{postId})
        </foreach>
    </insert>

    <select id="findPostAndDeptIdsByAdminUserId" parameterType="long" resultMap="postDeptIdMap">
        SELECT sp.`id` post_id, sp.`sys_dept_id` dept_id
        FROM sys_admin_user sau, sys_admin_user_post saup, sys_post sp
        WHERE sau.`id` = #{id} AND sau.`id` = saup.`admin_user_id` AND saup.`post_id` = sp.`id`;
    </select>

    <select id="findRoleCodesByAdminUserId" parameterType="long" resultType="string">
        SELECT sr.`code`
        FROM sys_admin_user sau, sys_admin_user_role saur, sys_role sr
        WHERE sau.`id` = #{id} AND sau.`id` = saur.`admin_user_id` AND saur.`role_id` = sr.`id`
    </select>

    <select id="findFunctionPermissionCodesByAdminUserId" parameterType="long" resultType="string">
        SELECT sfp.`code`
        FROM sys_admin_user sau, sys_admin_user_role saur, sys_role sr, sys_role_function_permission srfp, sys_function_permission sfp
        WHERE sau.`id` = #{id} AND sau.`id` = saur.`admin_user_id` AND saur.`role_id` = sr.`id` AND sr.`id` = srfp.`role_id`
        AND srfp.`function_permission_id` = sfp.`id`
    </select>
</mapper>
